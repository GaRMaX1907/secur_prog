from logic import DB_Manager
from logicCOURSE import Course
from logicWEATHER import Weather

from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types
import random

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)
  
def no_tasks(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –∏ –∑–∞–¥–∞—á!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /new_task')

def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
        markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_tasks = {'–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏' : ["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", "task_name"],
                          "–û–ø–∏—Å–∞–Ω–∏–µ" : ["–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", "description"],
                          "–°—Å—ã–ª–∫–∞" : ["–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)", "url"],
                          "–°—Ç–∞—Ç—É—Å" : ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏", "status_id"]}

def info_task(message, user_id, task_name):
    info = manager.get_task_info(user_id, task_name)[0]
    timestatuses = manager.get_task_timestatuses(task_name)
    if not timestatuses:
        timestatuses = '–°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'
    bot.send_message(message.chat.id, f"""task name: {info[0]}
Description: {info[1]}
Link: {info[2]}
Status: {info[3]}
timestatuses: {timestatuses}
""")

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å
–ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º; –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∏ –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ!
–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ Gigachat) 
""")
    info(message)
    
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

/new_task - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
/dollar - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
/weather - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É
/random - –ø–æ–¥–±—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ —Ä–∞–∑–≤–ª–µ—á—å —Å–µ–±—è


–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π!""")
    
#–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

@bot.message_handler(command=['/random'])
def random_handler(message):
    bot.send_message(message.chat.id, random('–û—Ä—ë–ª', '–†–µ—à–∫–∞'))

@bot.message_handler(command=['dollar'])
def dollar_handler(messsage):
    get_course_dol = Course
    bot.send_message(messsage.chat.id, get_course_dol)

@bot.message_handler(command=['weather'])
def wether_handler(message):
    get_weather = Weather
    bot.send_message(message.chat.id, get_weather)

@bot.message_handler(command=['chatGPT'])
def chatGPT_handler(message):
    get_gpt = Gigachat
    bot.send_message(message.chat.id, get_gpt)
    
#–§—É–Ω–∫—Ü–∏—è "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" 

@bot.message_handler(commands=['new_task'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, name_task)

def name_task(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
    bot.register_next_step_handler(message, description_task, data=data)

def description_task(message, data):
    data.append(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á—Ç–æ-–ª–∏–±–æ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–¥–∞—á–∞)")
    bot.register_next_step_handler(message, link_task, data=data)

def link_task(message, data):
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()] 
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_task, data=data, statuses=statuses)


def callback_task(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in statuses:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_task, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    manager.insert_task([tuple(data)])
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

#–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞

@bot.message_handler(commands=['timestatuses'])
def timestatus_handler(message):
    user_id = message.from_user.id
    tasks = manager.get_tasks(user_id)
    if tasks:
        tasks = [x[2] for x in tasks]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏', reply_markup=gen_markup(tasks))
        bot.register_next_step_handler(message, timestatus_task, tasks=tasks)
    else:
        no_tasks(message)


def timestatus_task(message, tasks):
    task_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if task_name not in tasks:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—É—Å', reply_markup=gen_markup(tasks))
        bot.register_next_step_handler(message, timestatus_task, tasks=tasks)
    else:
        timestatuses = [x[1] for x in manager.get_timestatuses()]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏', reply_markup=gen_markup(timestatuses))
        bot.register_next_step_handler(message, set_timestatus, task_name=task_name, timestatuses=timestatuses)

def set_timestatus(message, task_name, timestatuses):
    timestatus = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
        
    if timestatus not in timestatuses:
        bot.send_message(message.chat.id, '–í–∏–¥–∏–º–æ, –≤—ã –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞—á–∏', reply_markup=gen_markup(timestatuses))
        bot.register_next_step_handler(message, set_timestatus, task_name=task_name, timestatuses=timestatuses)
        return
    manager.insert_timestatus(user_id, task_name, timestatus )
    bot.send_message(message.chat.id, f'–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ {timestatus} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É {task_name}')

#–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á

@bot.message_handler(commands=['tasks'])
def get_tasks(message):
    user_id = message.from_user.id
    tasks = manager.get_tasks(user_id)
    if tasks:
        text = "\n".join([f"task name:{x[2]} \nLink:{x[4]}\n" for x in tasks])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in tasks]))
    else:
        no_tasks(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    task_name = call.data
    info_task(call.message, call.from_user.id, task_name)

#–§—É–Ω–∫–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è

@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    tasks = manager.get_tasks(user_id)
    if tasks:
        text = "\n".join([f"task name:{x[2]} \nLink:{x[4]}\n" for x in tasks])
        tasks = [x[2] for x in tasks]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(tasks))
        bot.register_next_step_handler(message, delete_task, tasks=tasks)
    else:
        no_tasks(message)

def delete_task(message, tasks):
    task = message.text
    user_id = message.from_user.id

    if message.text == cancel_button:
        cansel(message)
        return
    if task not in tasks:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏, –ø–æ–ø—Ä–æ–±—É–π–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', reply_markup=gen_markup(tasks))
        bot.register_next_step_handler(message, delete_task, tasks=tasks)
        return
    task_id = manager.get_task_id(task, user_id)
    manager.delete_task(user_id, task_id)
    bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ {task} —É–¥–∞–ª–µ–Ω–∞!')

#–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏

@bot.message_handler(commands=['update_tasks'])
def update_task(message):
    user_id = message.from_user.id
    tasks = manager.get_tasks(user_id)
    if tasks:
        tasks = [x[2] for x in tasks]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=gen_markup(tasks))
        bot.register_next_step_handler(message, update_task_step_2, tasks=tasks )
    else:
        no_tasks(message)

def update_task_step_2(message, tasks):
    task_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if task_name not in tasks:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(tasks))
        bot.register_next_step_handler(message, update_task_step_2, tasks=tasks )
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∑–∞–¥–∞—á–µ", reply_markup=gen_markup(attributes_of_tasks.keys()))
    bot.register_next_step_handler(message, update_task_step_3, task_name=task_name)

def update_task_step_3(message, task_name):
    attribute = message.text
    reply_markup = None 
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_tasks.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(attributes_of_tasks.keys()))
        bot.register_next_step_handler(message, update_task_step_3, task_name=task_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_tasks[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_task_step_4, task_name=task_name, attribute=attributes_of_tasks[attribute][1])

def update_task_step_4(message, task_name, attribute): 
    update_info = message.text
    if attribute== "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_task_step_4, task_name=task_name, attribute=attribute)
            return
    user_id = message.from_user.id
    data = (update_info, task_name, user_id)
    manager.update_tasks(attribute, data)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!)")


@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    tasks =[ x[2] for x in manager.get_tasks(user_id)]
    task = message.text
    if task in tasks:
        info_task(message, user_id, task)
        return
    bot.reply_to(message, "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info(message)

if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()